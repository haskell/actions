name: "/setup"
on:
  push:
    branches:
      - main
    paths-ignore:
      - "**.md"
  pull_request:
    paths-ignore:
      - "**.md"
  workflow_dispatch:

defaults:
  run:
    working-directory: setup

jobs:
  test:
    name: Unit Tests - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "16"
          cache: "npm"
          cache-dependency-path: setup/package-lock.json
      - run: npm ci --prefer-offline --no-audit --progress=false
      - run: npm run bundle
      - run: npm test

  install-haskell:
    name: GHC ${{ matrix.plan.ghc }}, Cabal ${{ matrix.plan.cabal }} - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:

      # Let's see how the other installs are doing and not fail on the first
      fail-fast: false

      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        plan:
          # Latest releases
          - ghc:   latest
            cabal: latest
          # Recommended releases (update according to ghcup)
          - ghc:   "9.2"
            cabal: "3.6"
          # Some previously recommended releases of ghc with matching cabal
          - ghc:   "8.10"
            cabal: "3.2"
          - ghc:   "8.8"
            cabal: "3.0"
              # cabal-3.0 install might have the Windows symlinking problem
              # https://github.com/haskell/cabal/issues/5748
          - ghc:   "8.6"
            cabal: "2.4"
        cabal_update: ["false"]
        # The following tests do not set 'cabal-update', which defaults to 'true' then.

        include:

          # Test #210 (XDG): is the cabal store-dir set to something meaningful?
          - os:  ubuntu-latest
            plan:
              ghc:   "9.6"
              cabal: "3.10"
            cabal_update: "true"
          # With choco, cabal 3.10.1.0 should map to 3.10.1.1
          - os:  windows-latest
            plan:
              ghc:   "9.6"
              cabal: "3.10"
            cabal_update: "true"

          # Test some old versions
          - os: ubuntu-latest
            plan:
              ghc:   "8.2.2"
              cabal: "2.4.1.0"
            cabal_update: "false"
          - os: ubuntu-18.04
            plan:
              ghc:   "7.4.1"
              cabal: "3.4"

          # Test ghcup pre-release channel
          - os: ubuntu-latest
            ghcup_release_channel: "https://raw.githubusercontent.com/haskell/ghcup-metadata/master/ghcup-prereleases-0.0.7.yaml"
            plan:
              ghc:   "9.6.0.20230111"
              cabal: "3.8"

          # setup does something special for 7.10.3 (issue #79)
          - os: ubuntu-20.04
            plan:
              ghc:   "7.10.3"
              cabal: "3.6"
          - os: macOS-latest
            plan:
              ghc:   "7.10.3"
              cabal: "3.4"

          # Andreas 2022-12-29, issue #98: GHC 7.10 failed to install on windows (choco)
          - os: windows-latest
            plan:
              ghc:   "7.10"
              cabal: "3.0"

          # Test for issue #129: GHC 9.4.3 failed to install on windows (choco)
          - os: windows-latest
            plan:
              ghc:   "9.4.3"
              cabal: "3.8.1.0"
          - os: windows-latest
            plan:
              ghc:   "9.2.5"
              cabal: "3.6"

    steps:
      - uses: actions/checkout@v3

      - uses: ./setup
        with:
          ghc-version: ${{ matrix.plan.ghc }}
          ghcup-release-channel: ${{ matrix.ghcup_release_channel }}
          cabal-version: ${{ matrix.plan.cabal }}
          cabal-update: ${{ matrix.cabal_update }}

      - name: Show installed versions
        run: |
          cabal --version
          ghc --version

      - name: Test runghc
        run: |
          runghc --version
          runghc __tests__/hello.hs

      - name: Build test project
        working-directory: setup/__tests__/project
        run: cabal build

      - name: Run test project
        working-directory: setup/__tests__/project
        run: cabal run

      - name: Install test project
        working-directory: setup/__tests__/project
        run: cabal install

      - name: Run installed test project
        run: hello-haskell-setup
        # This tests whether the default installdir has been added to the PATH (issue #130).

      - name: Build and run test with Hackage dependency
        if:   ${{ matrix.cabal_update != 'false' }}
        working-directory: setup/__tests__/project-with-hackage-dependency
        run:  cabal build && cabal run

      - name: Confirm installed and expected versions match
        shell: bash
        # check that if given in the matrix, the actual version matches:
        # - cabal: major version
        # - ghc: major and minor version
        # pure bash startsWith
        run: |
          CABALVER="$(cabal --numeric-version)"
          GHCVER="$(ghc --numeric-version)"
          if [[ "${{ matrix.plan.cabal }}" =~ ^([0-9]+\.[0-9]+) ]]; then cabalmajor="${BASH_REMATCH[1]}"; fi
          if [[ "${{ matrix.plan.ghc }}" =~ ^([0-9]+\.[0-9]+) ]]; then ghcmajor="${BASH_REMATCH[1]}"; fi
          if [[ "${{ matrix.plan.ghc }}" =~ ^([0-9]+\.[0-9]+\.[0-9]+) ]]; then ghcver="${BASH_REMATCH[1]}"; fi
          [[ "${CABALVER}" =~ ^"${cabalmajor}" ]] && [[ "${GHCVER}" =~ ^"${ghcmajor}" ]] && [[ "${GHCVER}" =~ ^"${ghcver}" ]]

  test-fallback:
    name: Test GHC Installation Fallbacks - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
    steps:
      - uses: actions/checkout@v3
      - uses: ./setup
        id: setup
        env:
          RUNNER_DEBUG: "1"
        with:
          ghc-version: 8.21.5
      - name: Error on success
        if: steps.setup.outputs.failed != 'true'
          # NB: 'failed' is an undeclared output of the setup action, used in debug mode
        run: |
          echo "Error: ghc 8.21.5 didn't fail to install"

  install-stack:
    name: Stack ${{ matrix.stack }} ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        stack: ["latest", "2.3.3"]

    steps:
      - uses: actions/checkout@v3
      - uses: ./setup
        with:
          enable-stack: true
          stack-no-global: true
          stack-version: ${{ matrix.stack }}
      - run: |
          stack --version
          stack --help
