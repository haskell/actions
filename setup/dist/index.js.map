{"version":3,"sources":["../src/main.ts","../src/opts.ts","../src/versions.json","../src/release-revisions.json","../src/setup-haskell.ts","../src/installer.ts"],"sourcesContent":["import * as core from '@actions/core';\nimport {yamlInputs} from './opts';\nimport run from './setup-haskell';\n\nrun(\n  Object.fromEntries(Object.keys(yamlInputs).map(k => [k, core.getInput(k)]))\n);\n","import * as core from '@actions/core';\nimport {readFileSync} from 'fs';\nimport {load} from 'js-yaml';\nimport {join} from 'path';\nimport * as sv from './versions.json';\nimport * as rv from './release-revisions.json';\n\nexport const release_revisions = rv as Revisions;\nexport const supported_versions = sv as Record<Tool, string[]>;\nexport const ghcup_version = sv.ghcup[0]; // Known to be an array of length 1\n\nexport type Revisions = Record<\n  OS,\n  Record<Tool, Array<{from: string; to: string}>>\n>;\nexport type OS = 'linux' | 'darwin' | 'win32';\nexport type Tool = 'cabal' | 'ghc' | 'stack';\n\nexport interface ProgramOpt {\n  enable: boolean;\n  raw: string;\n  resolved: string;\n}\n\nexport interface Options {\n  ghc: ProgramOpt;\n  ghcup: {releaseChannel?: URL};\n  cabal: ProgramOpt & {update: boolean};\n  stack: ProgramOpt & {setup: boolean};\n  general: {matcher: {enable: boolean}};\n}\n\ntype Version = {version: string; supported: string[]};\nexport type Defaults = Record<Tool, Version> & {\n  general: {matcher: {enable: boolean}};\n};\n\n/**\n * Reads the example `actions.yml` file and selects the `inputs` key. The result\n * will be a key-value map of the following shape:\n * ```\n * {\n *   'ghc-version': {\n *     required: false,\n *     description: '...',\n *     default: 'latest'\n *   },\n *   'cabal-version': {\n *     required: false,\n *     description: '...',\n *     default: 'latest'\n *   },\n *   'stack-version': {\n *     required: false,\n *     description: '...',\n *     default: 'latest'\n *   },\n *   'enable-stack': {\n *     required: false,\n *     default: 'latest'\n *   },\n *   ...\n * }\n * ```\n */\nexport const yamlInputs: Record<string, {default: string}> = (\n  load(\n    readFileSync(join(__dirname, '..', 'action.yml'), 'utf8')\n    // The action.yml file structure is statically known.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ) as any\n).inputs;\n\nexport function getDefaults(os: OS): Defaults {\n  const mkVersion = (v: string, vs: string[], t: Tool): Version => ({\n    version: resolve(yamlInputs[v].default, vs, t, os, false), // verbose=false: no printout here\n    supported: vs\n  });\n\n  return {\n    ghc: mkVersion('ghc-version', supported_versions.ghc, 'ghc'),\n    cabal: mkVersion('cabal-version', supported_versions.cabal, 'cabal'),\n    stack: mkVersion('stack-version', supported_versions.stack, 'stack'),\n    general: {matcher: {enable: true}}\n  };\n}\n\n// E.g. resolve ghc latest to 9.4.2\n// resolve ghc 8.1 to 8.10.7 (bug, https://github.com/haskell/actions/issues/248)\nfunction resolve(\n  version: string,\n  supported: string[],\n  tool: Tool,\n  os: OS,\n  verbose: boolean // If resolution isn't the identity, print what resolved to what.\n): string {\n  const result =\n    version === 'latest'\n      ? supported[0]\n      : supported.find(v => v.startsWith(version)) ?? version;\n  // Andreas 2022-12-29, issue #144: inform about resolution here where we can also output ${tool}.\n  if (verbose === true && version !== result)\n    core.info(`Resolved ${tool} ${version} to ${result}`);\n  return result;\n}\n\n// Further resolve the version to a revision using release-revisions.json.\n// This is only needed for choco-installs (at time of writing, 2022-12-29).\nexport function releaseRevision(version: string, tool: Tool, os: OS): string {\n  const result: string =\n    release_revisions?.[os]?.[tool]?.find(({from}) => from === version)?.to ??\n    version;\n  return result;\n}\n\n/**\n * Convert a string input to a boolean according to the YAML 1.2 \"core schema\" specification.\n * Supported boolean renderings: `true | True | TRUE | false | False | FALSE` .\n * ref: https://yaml.org/spec/1.2/spec.html#id2804923\n * Adapted from: https://github.com/actions/toolkit/commit/fbdf27470cdcb52f16755d32082f1fee0bfb7d6d#diff-f63fb32fca85d8e177d6400ce078818a4815b80ac7a3319b60d3507354890992R94-R115\n *\n * @param     name     name of the input\n * @param     val      supposed string representation of a boolean\n * @returns   boolean\n */\nexport function parseYAMLBoolean(name: string, val: string): boolean {\n  const trueValue = ['true', 'True', 'TRUE'];\n  const falseValue = ['false', 'False', 'FALSE'];\n  if (trueValue.includes(val)) return true;\n  if (falseValue.includes(val)) return false;\n  throw new TypeError(\n    `Action input \"${name}\" does not meet YAML 1.2 \"Core Schema\" specification: \\n` +\n      `Supported boolean values: \\`true | True | TRUE | false | False | FALSE\\``\n  );\n}\n\nexport function parseURL(name: string, val: string): URL | undefined {\n  if (val === '') return undefined;\n  try {\n    return new URL(val);\n  } catch (e) {\n    throw new TypeError(`Action input \"${name}\" is not a valid URL`);\n  }\n}\n\nexport function getOpts(\n  {ghc, cabal, stack}: Defaults,\n  os: OS,\n  inputs: Record<string, string>\n): Options {\n  core.debug(`Inputs are: ${JSON.stringify(inputs)}`);\n  const stackNoGlobal = (inputs['stack-no-global'] || '') !== '';\n  const stackSetupGhc = (inputs['stack-setup-ghc'] || '') !== '';\n  const stackEnable = (inputs['enable-stack'] || '') !== '';\n  const matcherDisable = (inputs['disable-matcher'] || '') !== '';\n  const ghcupReleaseChannel = parseURL(\n    'ghcup-release-channel',\n    inputs['ghcup-release-channel'] || ''\n  );\n  // Andreas, 2023-01-05, issue #29:\n  // 'cabal-update' has a default value, so we should get a proper boolean always.\n  // Andreas, 2023-01-06: This is not true if we use the action as a library.\n  // Thus, need to patch with default value here.\n  const cabalUpdate = parseYAMLBoolean(\n    'cabal-update',\n    inputs['cabal-update'] || 'true'\n  );\n  core.debug(`${stackNoGlobal}/${stackSetupGhc}/${stackEnable}`);\n  const verInpt = {\n    ghc: inputs['ghc-version'] || ghc.version,\n    cabal: inputs['cabal-version'] || cabal.version,\n    stack: inputs['stack-version'] || stack.version\n  };\n\n  const errors = [];\n  if (stackNoGlobal && !stackEnable) {\n    errors.push('enable-stack is required if stack-no-global is set');\n  }\n\n  if (stackSetupGhc && !stackEnable) {\n    errors.push('enable-stack is required if stack-setup-ghc is set');\n  }\n\n  if (errors.length > 0) {\n    throw new Error(errors.join('\\n'));\n  }\n\n  const ghcEnable = !stackNoGlobal;\n  const cabalEnable = !stackNoGlobal;\n  const opts: Options = {\n    ghc: {\n      raw: verInpt.ghc,\n      resolved: resolve(\n        verInpt.ghc,\n        ghc.supported,\n        'ghc',\n        os,\n        ghcEnable // if true: inform user about resolution\n      ),\n      enable: ghcEnable\n    },\n    ghcup: {\n      releaseChannel: ghcupReleaseChannel\n    },\n    cabal: {\n      raw: verInpt.cabal,\n      resolved: resolve(\n        verInpt.cabal,\n        cabal.supported,\n        'cabal',\n        os,\n        cabalEnable // if true: inform user about resolution\n      ),\n      enable: cabalEnable,\n      update: cabalUpdate\n    },\n    stack: {\n      raw: verInpt.stack,\n      resolved: resolve(\n        verInpt.stack,\n        stack.supported,\n        'stack',\n        os,\n        stackEnable // if true: inform user about resolution\n      ),\n      enable: stackEnable,\n      setup: stackSetupGhc\n    },\n    general: {matcher: {enable: !matcherDisable}}\n  };\n\n  core.debug(`Options are: ${JSON.stringify(opts)}`);\n  return opts;\n}\n","{\n  \"ghc\": [\n    \"9.6.1\",\n    \"9.4.5\",\n    \"9.4.4\",\n    \"9.4.3\",\n    \"9.4.2\",\n    \"9.4.1\",\n    \"9.2.7\",\n    \"9.2.6\",\n    \"9.2.5\",\n    \"9.2.4\",\n    \"9.2.3\",\n    \"9.2.2\",\n    \"9.2.1\",\n    \"9.0.2\",\n    \"9.0.1\",\n    \"8.10.7\",\n    \"8.10.6\",\n    \"8.10.5\",\n    \"8.10.4\",\n    \"8.10.3\",\n    \"8.10.2\",\n    \"8.10.1\",\n    \"8.8.4\",\n    \"8.8.3\",\n    \"8.8.2\",\n    \"8.8.1\",\n    \"8.6.5\",\n    \"8.6.4\",\n    \"8.6.3\",\n    \"8.6.2\",\n    \"8.6.1\",\n    \"8.4.4\",\n    \"8.4.3\",\n    \"8.4.2\",\n    \"8.4.1\",\n    \"8.2.2\",\n    \"8.0.2\",\n    \"7.10.3\"\n  ],\n  \"cabal\": [\n    \"3.10.1.0\",\n    \"3.8.1.0\",\n    \"3.6.2.0\",\n    \"3.6.0.0\",\n    \"3.4.1.0\",\n    \"3.4.0.0\",\n    \"3.2.0.0\",\n    \"3.0.0.0\",\n    \"2.4.1.0\"\n  ],\n  \"stack\": [\n    \"2.9.3\",\n    \"2.9.1\",\n    \"2.7.5\",\n    \"2.7.3\",\n    \"2.7.1\",\n    \"2.5.1\",\n    \"2.3.3\",\n    \"2.3.1\",\n    \"2.1.3\",\n    \"2.1.1\",\n    \"1.9.3\",\n    \"1.9.1\",\n    \"1.7.1\",\n    \"1.6.5\",\n    \"1.6.3\",\n    \"1.6.1\",\n    \"1.5.1\",\n    \"1.5.0\",\n    \"1.4.0\",\n    \"1.3.2\",\n    \"1.3.0\",\n    \"1.2.0\"\n  ],\n  \"ghcup\": [\"0.1.19.2\"]\n}\n","{\n  \"win32\": {\n    \"ghc\": [\n      {\"from\": \"9.4.3\", \"to\": \"9.4.3.1\"},\n      {\"from\": \"9.2.5\", \"to\": \"9.2.5.1\"},\n      {\"from\": \"8.10.2\", \"to\": \"8.10.2.2\"},\n      {\"from\": \"8.10.1\", \"to\": \"8.10.1.1\"},\n      {\"from\": \"8.8.4\", \"to\": \"8.8.4.1\"},\n      {\"from\": \"8.8.3\", \"to\": \"8.8.3.1\"},\n      {\"from\": \"8.8.2\", \"to\": \"8.8.2.1\"},\n      {\"from\": \"8.6.1\", \"to\": \"8.6.1.1\"},\n      {\"from\": \"8.0.2\", \"to\": \"8.0.2.2\"},\n      {\"from\": \"7.10.3\", \"to\": \"7.10.3.2\"},\n      {\"from\": \"7.10.2\", \"to\": \"7.10.2.1\"},\n      {\"from\": \"7.10.1\", \"to\": \"7.10.1.1\"},\n      {\"from\": \"7.8.4\", \"to\": \"7.8.4.1\"},\n      {\"from\": \"7.8.3\", \"to\": \"7.8.3.1\"},\n      {\"from\": \"7.8.2\", \"to\": \"7.8.2.1\"},\n      {\"from\": \"7.8.1\", \"to\": \"7.8.1.1\"},\n      {\"from\": \"7.6.3\", \"to\": \"7.6.3.1\"},\n      {\"from\": \"7.6.2\", \"to\": \"7.6.2.1\"},\n      {\"from\": \"7.6.1\", \"to\": \"7.6.1.1\"}\n    ],\n    \"cabal\": [{\"from\": \"3.10.1.0\", \"to\": \"3.10.1.1\"}]\n  }\n}\n","import * as core from '@actions/core';\nimport * as io from '@actions/io';\nimport ensureError from 'ensure-error';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport {EOL} from 'os';\nimport {getOpts, getDefaults, Tool} from './opts';\nimport {addGhcupReleaseChannel, installTool, resetTool} from './installer';\nimport type {OS} from './opts';\nimport {exec} from '@actions/exec';\n\nasync function cabalConfig(): Promise<string> {\n  let out = Buffer.from('');\n  const append = (b: Buffer): Buffer => (out = Buffer.concat([out, b]));\n  await exec('cabal', ['--help'], {\n    silent: true,\n    listeners: {stdout: append, stderr: append}\n  });\n  return out.toString().trim().split('\\n').slice(-1)[0].trim();\n}\n\nexport default async function run(\n  inputs: Record<string, string>\n): Promise<void> {\n  try {\n    core.info('Preparing to setup a Haskell environment');\n    const os = process.platform as OS;\n    const opts = getOpts(getDefaults(os), os, inputs);\n    core.debug(`run: inputs = ${JSON.stringify(inputs)}`);\n    core.debug(`run: os     = ${JSON.stringify(os)}`);\n    core.debug(`run: opts   = ${JSON.stringify(opts)}`);\n\n    if (opts.ghcup.releaseChannel) {\n      await core.group(`Preparing ghcup environment`, async () =>\n        addGhcupReleaseChannel(opts.ghcup.releaseChannel!, os)\n      );\n    }\n\n    for (const [t, {resolved}] of Object.entries(opts).filter(\n      o => o[1].enable\n    )) {\n      await core.group(`Preparing ${t} environment`, async () =>\n        resetTool(t as Tool, resolved, os)\n      );\n      await core.group(`Installing ${t} version ${resolved}`, async () =>\n        installTool(t as Tool, resolved, os)\n      );\n    }\n\n    if (opts.stack.setup)\n      await core.group('Pre-installing GHC with stack', async () =>\n        exec('stack', ['setup', opts.ghc.resolved])\n      );\n\n    if (opts.cabal.enable)\n      await core.group('Setting up cabal', async () => {\n        // Andreas, 2023-03-16, issue #210.\n        // Create .cabal/bin to activate non-XDG mode of cabal.\n        if (process.platform !== 'win32')\n          io.mkdirP(`${process.env.HOME}/.cabal/bin`);\n\n        // Create config only if it doesn't exist.\n        await exec('cabal', ['user-config', 'init'], {\n          silent: true,\n          ignoreReturnCode: true\n        });\n\n        // Set the 'store-dir' in the cabal configuration.\n        // Blindly appending is fine.\n        // Cabal merges these and picks the last defined option.\n        const configFile = await cabalConfig();\n        const storeDir =\n          process.platform === 'win32'\n            ? 'C:\\\\sr'\n            : `${process.env.HOME}/.cabal/store`;\n        fs.appendFileSync(configFile, `store-dir: ${storeDir}${EOL}`);\n        core.setOutput('cabal-store', storeDir);\n        if (process.platform === 'win32') {\n          // Some Windows version cannot symlink, so we need to switch to 'install-method: copy'.\n          // Choco does this for us, but not GHCup: https://github.com/haskell/ghcup-hs/issues/808\n          // However, here we do not know whether we installed with choco or not, so do it always:\n          fs.appendFileSync(configFile, `install-method: copy${EOL}`);\n          fs.appendFileSync(configFile, `overwrite-policy: always${EOL}`);\n        } else {\n          // Issue #130: for non-choco installs, add ~/.cabal/bin to PATH\n          const installdir = `${process.env.HOME}/.cabal/bin`;\n          core.info(`Adding ${installdir} to PATH`);\n          core.addPath(installdir);\n        }\n\n        // Workaround the GHC nopie linking errors for ancient GHC versions\n        // NB: Is this _just_ for GHC 7.10.3?\n        if (opts.ghc.resolved === '7.10.3' && os !== 'win32') {\n          fs.appendFileSync(\n            configFile,\n            ['program-default-options', '  ghc-options: -optl-no-pie'].join(\n              EOL\n            ) + EOL\n          );\n\n          // We cannot use cabal user-config to normalize the config because of:\n          // https://github.com/haskell/cabal/issues/6823\n          // await exec('cabal user-config update');\n        }\n        if (opts.cabal.update && !opts.stack.enable) await exec('cabal update');\n      });\n\n    core.info(`##[add-matcher]${path.join(__dirname, '..', 'matcher.json')}`);\n  } catch (_error) {\n    const error = ensureError(_error);\n    if (core.isDebug()) {\n      // we don't fail here so that the error path can be tested in CI\n      core.setOutput('failed', true);\n      core.debug(error.message);\n    } else {\n      core.setFailed(error.message);\n    }\n  }\n}\n","import * as core from '@actions/core';\nimport {exec as e} from '@actions/exec';\nimport {which} from '@actions/io';\nimport * as tc from '@actions/tool-cache';\nimport {promises as afs} from 'fs';\nimport {join, dirname} from 'path';\nimport {ghcup_version, OS, Tool, releaseRevision} from './opts';\nimport process from 'process';\nimport * as glob from '@actions/glob';\nimport * as fs from 'fs';\nimport {compareVersions} from 'compare-versions'; // compareVersions can be used in the sense of >\n\n// Don't throw on non-zero.\nconst exec = async (cmd: string, args?: string[]): Promise<number> =>\n  e(cmd, args, {ignoreReturnCode: true});\n\nfunction failed(tool: Tool, version: string): void {\n  throw new Error(`All install methods for ${tool} ${version} failed`);\n}\n\nasync function configureOutputs(\n  tool: Tool,\n  version: string,\n  path: string,\n  os: OS\n): Promise<void> {\n  core.setOutput(`${tool}-path`, path);\n  core.setOutput(`${tool}-exe`, await which(tool));\n  if (tool == 'stack') {\n    const sr =\n      process.env['STACK_ROOT'] ??\n      (os === 'win32' ? 'C:\\\\sr' : `${process.env.HOME}/.stack`);\n    core.setOutput('stack-root', sr);\n    if (os === 'win32') core.exportVariable('STACK_ROOT', sr);\n  }\n  core.setOutput(`${tool}-version`, version);\n}\n\nasync function success(\n  tool: Tool,\n  version: string,\n  path: string,\n  os: OS\n): Promise<true> {\n  core.addPath(path);\n  await configureOutputs(tool, version, path, os);\n  core.info(\n    `Found ${tool} ${version} in cache at path ${path}. Setup successful.`\n  );\n  return true;\n}\n\nfunction warn(tool: Tool, version: string): void {\n  core.debug(\n    `${tool} ${version} was not found in the cache. It will be downloaded.\\n` +\n      `If this is unexpected, please check if version ${version} is pre-installed.\\n` +\n      `The list of pre-installed versions is available from here: https://github.com/actions/runner-images#available-images\\n` +\n      'If the list is outdated, please file an issue here: https://github.com/actions/runner-images/issues\\n' +\n      'by using the appropriate tool request template: https://github.com/actions/runner-images/issues/new/choose'\n  );\n}\n\nfunction aptVersion(tool: string, version: string): string {\n  // For Cabal, extract the first two segments of the version number.\n  // This regex is intentionally liberal to accommodate unusual cases like \"head\".\n  return tool === 'cabal' ? /[^.]*\\.?[^.]*/.exec(version)![0] : version;\n}\n\nasync function isInstalled(\n  tool: Tool,\n  version: string,\n  os: OS\n): Promise<boolean> {\n  const toolPath = tc.find(tool, version);\n  if (toolPath) return success(tool, version, toolPath, os);\n\n  // Path where ghcup installs binaries\n  const ghcupPath =\n    os === 'win32' ? 'C:/ghcup/bin' : `${process.env.HOME}/.ghcup/bin`;\n\n  // Path where apt installs binaries of a tool\n  const v = aptVersion(tool, version);\n  const aptPath = `/opt/${tool}/${v}/bin`;\n\n  // Path where choco installs binaries of a tool\n  const chocoPath = await getChocoPath(\n    tool,\n    version,\n    releaseRevision(version, tool, os)\n  );\n\n  const locations = {\n    stack: [], // Always installed into the tool cache\n    cabal: {\n      win32: [chocoPath, ghcupPath],\n      linux: [aptPath, ghcupPath],\n      darwin: [ghcupPath]\n    }[os],\n    ghc: {\n      win32: [chocoPath, ghcupPath],\n      linux: [aptPath, ghcupPath],\n      darwin: [ghcupPath]\n    }[os]\n  };\n  core.debug(`isInstalled ${tool} ${version} ${locations[tool]}`);\n  const f = await exec(await ghcupBin(os), ['whereis', tool, version]);\n  core.info(`\\n`);\n  core.debug(`isInstalled whereis ${f}`);\n\n  for (const p of locations[tool]) {\n    core.info(`Attempting to access tool ${tool} at location ${p}`);\n    const installedPath = await afs\n      .access(p)\n      .then(() => p)\n      .catch(() => undefined);\n\n    if (installedPath == undefined) {\n      core.info(`Failed to access tool ${tool} at location ${p}`);\n    } else {\n      core.info(`Succeeded accessing tool ${tool} at location ${p}`);\n    }\n\n    if (installedPath) {\n      // Make sure that the correct ghc is used, even if ghcup has set a\n      // default prior to this action being ran.\n      core.debug(`isInstalled installedPath: ${installedPath}`);\n      if (installedPath === ghcupPath) {\n        // If the result of this `ghcup set` is non-zero, the version we want\n        // is probably not actually installed\n        const ghcupSetResult = await exec(await ghcupBin(os), [\n          'set',\n          tool,\n          version\n        ]);\n        if (ghcupSetResult == 0) {\n          return success(tool, version, installedPath, os);\n        } else {\n          // Andreas, 2023-05-03, issue #245.\n          // Since we do not have the correct version, disable any default version.\n          await exec(await ghcupBin(os), ['unset', tool]);\n        }\n      } else {\n        // Install methods apt and choco have precise install paths,\n        // so if the install path is present, the tool should be present, too.\n        return success(tool, version, installedPath, os);\n      }\n    }\n  }\n  return false;\n}\n\nexport async function installTool(\n  tool: Tool,\n  version: string,\n  os: OS\n): Promise<void> {\n  if (await isInstalled(tool, version, os)) return;\n  warn(tool, version);\n\n  if (tool === 'stack') {\n    await stack(version, os);\n    if (await isInstalled(tool, version, os)) return;\n    return failed(tool, version);\n  }\n\n  switch (os) {\n    case 'linux':\n      if (tool === 'ghc' && version === 'head') {\n        if (!(await aptBuildEssential())) break;\n\n        await ghcupGHCHead();\n        break;\n      }\n      if (tool === 'ghc' && compareVersions('8.3', version)) {\n        // Andreas, 2022-12-09: The following errors out if we are not ubuntu-20.04.\n        // Atm, I do not know how to check whether we are on ubuntu-20.04.\n        // So, ignore the error.\n        // if (!(await aptLibCurses5())) break;\n        await aptLibNCurses5();\n      }\n      await ghcup(tool, version, os);\n      if (await isInstalled(tool, version, os)) return;\n      await apt(tool, version);\n      break;\n    case 'win32':\n      await choco(tool, version);\n      if (await isInstalled(tool, version, os)) return;\n      await ghcup(tool, version, os);\n      break;\n    case 'darwin':\n      await ghcup(tool, version, os);\n      break;\n  }\n\n  if (await isInstalled(tool, version, os)) return;\n  return failed(tool, version);\n}\n\nexport async function resetTool(\n  tool: Tool,\n  _version: string,\n  os: OS\n): Promise<void> {\n  if (tool === 'stack') {\n    // We don't need to do anything here... yet\n    // (Once we switch to utilizing ghcup for stack when possible, we can\n    // remove this early return)\n    return;\n  }\n\n  let bin = '';\n  switch (os) {\n    case 'linux':\n      bin = await ghcupBin(os);\n      await exec(bin, ['unset', tool]);\n      return;\n    case 'darwin':\n      bin = await ghcupBin(os);\n      await exec(bin, ['unset', tool]);\n      return;\n    case 'win32':\n      // We don't need to do anything here... yet\n      return;\n  }\n}\n\nasync function stack(version: string, os: OS): Promise<void> {\n  core.info(`Attempting to install stack ${version}`);\n  const build = {\n    linux: `linux-x86_64${\n      compareVersions(version, '2.3.1') >= 0 ? '' : '-static'\n    }`,\n    darwin: 'osx-x86_64',\n    win32: 'windows-x86_64'\n  }[os];\n\n  const url = `https://github.com/commercialhaskell/stack/releases/download/v${version}/stack-${version}-${build}.tar.gz`;\n  const p = await tc.downloadTool(`${url}`).then(tc.extractTar);\n  const [stackPath] = await glob\n    .create(`${p}/stack*`, {\n      implicitDescendants: false\n    })\n    .then(async g => g.glob());\n  await tc.cacheDir(stackPath, 'stack', version);\n}\n\nasync function aptBuildEssential(): Promise<boolean> {\n  core.info(`Installing build-essential using apt-get (for ghc-head)`);\n\n  const returnCode = await exec(\n    `sudo -- sh -c \"apt-get update && apt-get -y install build-essential\"`\n  );\n  return returnCode === 0;\n}\n\nasync function aptLibNCurses5(): Promise<boolean> {\n  core.info(\n    `Installing libcurses5 and libtinfo5 using apt-get (for ghc < 8.3)`\n  );\n\n  const returnCode = await exec(\n    `sudo -- sh -c \"apt-get update && apt-get -y install libncurses5 libtinfo5\"`\n  );\n  return returnCode === 0;\n}\n\nasync function apt(tool: Tool, version: string): Promise<void> {\n  const toolName = tool === 'ghc' ? 'ghc' : 'cabal-install';\n  const v = aptVersion(tool, version);\n  core.info(`Attempting to install ${toolName} ${v} using apt-get`);\n  // Ignore the return code so we can fall back to ghcup\n  await exec(\n    `sudo -- sh -c \"add-apt-repository -y ppa:hvr/ghc && apt-get update && apt-get -y install ${toolName}-${v}\"`\n  );\n}\n\nasync function choco(tool: Tool, version: string): Promise<void> {\n  core.info(`Attempting to install ${tool} ${version} using chocolatey`);\n\n  // E.g. GHC version 7.10.3 on Chocolatey is revision 7.10.3.1.\n  const revision: string = releaseRevision(version, tool, 'win32');\n\n  // Choco tries to invoke `add-path` command on earlier versions of ghc, which has been deprecated and fails the step, so disable command execution during this.\n  console.log('::stop-commands::SetupHaskellStopCommands');\n  const args = [\n    'choco',\n    'install',\n    tool,\n    '--version',\n    revision,\n    // Andreas, 2023-03-13:\n    // Removing the following (deprecated) option confuses getChocoPath, so we keep it for now.\n    // TODO: remove this option and update ghc and cabal locations in getChocoPath.\n    '--allow-multiple-versions',\n    // Andreas, 2023-03-13, issue #202:\n    // When installing GHC, skip automatic cabal installation.\n    tool == 'ghc' ? '--ignore-dependencies' : '',\n    // Verbosity options:\n    '--no-progress',\n    core.isDebug() ? '--debug' : '--limit-output'\n  ];\n  if ((await exec('powershell', args)) !== 0)\n    await exec('powershell', [...args, '--pre']);\n  console.log('::SetupHaskellStopCommands::'); // Re-enable command execution\n  // Add GHC to path automatically because it does not add until the end of the step and we check the path.\n\n  const chocoPath = await getChocoPath(tool, version, revision);\n\n  if (tool == 'ghc') core.addPath(chocoPath);\n}\n\nasync function ghcupBin(os: OS): Promise<string> {\n  core.debug(`ghcupBin : ${os}`);\n  if (os === 'win32') {\n    return 'ghcup';\n  }\n  const cachedBin = tc.find('ghcup', ghcup_version);\n  if (cachedBin) return join(cachedBin, 'ghcup');\n\n  const bin = await tc.downloadTool(\n    `https://downloads.haskell.org/ghcup/${ghcup_version}/x86_64-${\n      os === 'darwin' ? 'apple-darwin' : 'linux'\n    }-ghcup-${ghcup_version}`\n  );\n  await afs.chmod(bin, 0o755);\n  return join(\n    await tc.cacheFile(bin, 'ghcup', 'ghcup', ghcup_version),\n    'ghcup'\n  );\n}\n\nexport async function addGhcupReleaseChannel(\n  channel: URL,\n  os: OS\n): Promise<void> {\n  core.info(`Adding ghcup release channel: ${channel}`);\n  const bin = await ghcupBin(os);\n  await exec(bin, ['config', 'add-release-channel', channel.toString()]);\n}\n\nasync function ghcup(tool: Tool, version: string, os: OS): Promise<void> {\n  core.info(`Attempting to install ${tool} ${version} using ghcup`);\n  const bin = await ghcupBin(os);\n  const returnCode = await exec(bin, ['install', tool, version]);\n  if (returnCode === 0) await exec(bin, ['set', tool, version]);\n}\n\nasync function ghcupGHCHead(): Promise<void> {\n  core.info(`Attempting to install ghc head using ghcup`);\n  const bin = await ghcupBin('linux');\n  const returnCode = await exec(bin, [\n    'install',\n    'ghc',\n    '-u',\n    'https://gitlab.haskell.org/ghc/ghc/-/jobs/artifacts/master/raw/ghc-x86_64-deb9-linux-integer-simple.tar.xz?job=validate-x86_64-linux-deb9-integer-simple',\n    'head'\n  ]);\n  if (returnCode === 0) await exec(bin, ['set', 'ghc', 'head']);\n}\n\nasync function getChocoPath(\n  tool: Tool,\n  version: string,\n  revision: string\n): Promise<string> {\n  // Environment variable 'ChocolateyToolsLocation' will be added to Hosted images soon\n  // fallback to C:\\\\tools for now until variable is available\n  core.debug(\n    `getChocoPath(): ChocolateyToolsLocation = ${process.env.ChocolateyToolsLocation}`\n  );\n  const chocoToolsLocation =\n    process.env.ChocolateyToolsLocation ??\n    join(`${process.env.SystemDrive}`, 'tools');\n\n  // choco packages GHC 9.x are installed on different path (C:\\\\tools\\ghc-9.0.1)\n  let chocoToolPath = join(chocoToolsLocation, `${tool}-${version}`);\n\n  // choco packages GHC < 9.x\n  if (!fs.existsSync(chocoToolPath)) {\n    chocoToolPath = join(\n      `${process.env.ChocolateyInstall}`,\n      'lib',\n      `${tool}.${revision}`\n    );\n  }\n  core.debug(`getChocoPath(): chocoToolPath = ${chocoToolPath}`);\n\n  const pattern = `${chocoToolPath}/**/${tool}.exe`;\n  const globber = await glob.create(pattern);\n\n  for await (const file of globber.globGenerator()) {\n    core.debug(`getChocoPath(): found ${tool} at ${file}`);\n    return dirname(file);\n  }\n\n  core.debug(`getChocoPath(): cannot find binary for ${tool}`);\n  return '<not-found>';\n}\n"],"mappings":"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","names":["core","e","ghc","cabal","stack","core","fs","core","import_fs","import_path","e","path","process","afs","stack","ghcup","import_exec","ensureError"]}